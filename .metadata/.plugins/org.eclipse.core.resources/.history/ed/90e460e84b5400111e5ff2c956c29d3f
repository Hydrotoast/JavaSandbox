package Router;

import java.util.Comparator;

import MinHeapPriorityQueue.MaxHeapPriorityQueue;

public class EventRouter<E> implements Router<E> {
	private MaxHeapPriorityQueue<Channel<E>> routes;

	public EventRouter() {
		routes = new MaxHeapPriorityQueue<Channel<E>>(
				new Comparator<Channel<E>>() {

					@Override
					public int compare(Channel<E> arg0, Channel<E> arg1) {
						if (arg0.getCongestion() > arg1.getCongestion())
							return 1;
						else if (arg0.getCongestion() < arg1.getCongestion())
							return -1;
						else
							return 0;
					};
				});
	}

	@Override
	public void addChannel(Channel<E> route) {
		routes.add(route);
	}

	@Override
	public void dispatch(E message) {
		findLeastCongestedChannel().dispatch(message);
	}

	private Channel<E> findLeastCongestedChannel() {
		iter
			
		return bestRoute;
	}
}
