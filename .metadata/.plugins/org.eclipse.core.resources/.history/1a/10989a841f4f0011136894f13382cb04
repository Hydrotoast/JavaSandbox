public class Heap<E> {
	private static class Position<E> {
		private int key;
		private E data;
		
		public Position(int key, E data) {
			this.key = key;
			this.data = data;
		}
		
		public int getKey() {
			return key;
		}
		
		public E getData() {
			return data;
		}
	}
	
	private Comparable<?>[] entries;
	
	public Heap() {
		entries = new Comparable<?>[1];
	}
	
	private void swapEntries(int op1, int op2) {
		Comparable<?> swap = entries[op1];
		entries[op1] = entries[op2];
		entries[op2] = swap;
	}
	
	private void maxHeapify(int i) {
		int left;
		int right;
		int largest;
		
		if (right <= entries.length && entries[right].compareTo(Comparableentries[i]) > 0)
			largest = right;
		else if (left <= entries.length && entries[left].compareTo(entries[i]) > 0)
			largest = left;
		else
			largest = i;
		
		if (largest != i) {
			swapEntries(i, largest);
			
		}
	}
}