package edu.giocc.util.SkipList;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.Random;

import edu.giocc.util.Collection;

public class SkipList<K, V> implements Collection<K> {
	private class SkipListNode {
		public K key;
		public V value;
		public ArrayList<SkipListNode> forward;

		public SkipListNode(K key, V value) {
			this.key = key;
			this.value = value;
			forward = new ArrayList<SkipListNode>();
			forward.ensureCapacity(maxRank);
		}
	}

	private Comparator<K> comparator;
	private Random randomGen;

	private SkipListNode head;

	private int maxRank;
	private int count;

	public SkipList(Comparator<K> comparator) {
		this.comparator = comparator;
		this.randomGen = new Random(System.currentTimeMillis());

		head = new SkipListNode(null, null);
		count = 0;
		maxRank = 1;
	}

	@Override
	public boolean isEmpty() {
		return count == 0;
	}

	@Override
	public int size() {
		return count;
	}

	@Override
	public void clear() {
		head.forward = new ArrayList<SkipListNode>();
	}

	/**
	 * Inserts a new node with the specified key and value into the skip list.
	 * 
	 * @param key the key to add.
	 * @param value the value to add.
	 */
	public void insert(K key, V value) {
		SkipListNode node = new SkipListNode(key, value);
		ArrayList<SkipListNode> updates = buildUpdates(node);
		int rank = randRank();

		if (rank > maxRank) {
			increaseRank(rank, updates);
			node.forward.ensureCapacity(rank);
		}

		SkipListNode update;
		for (int i = 0; i < maxRank; i++) {
			update = updates.get(i);
			
			// Invariant: forward rank >= current height
			if (update.forward.size() > i)
				node.forward.add(i, update.forward.get(i));

			update.forward.add(i, node);
		}

		count++;
	}

	/**
	 * Returns a value with the specified key.
	 * 
	 * @param k the key associated with the value.
	 * @return the value associated with the key.
	 */
	public V get(K k) {
		if (isEmpty())
			throw new NoSuchElementException();

		SkipListNode cursor = head;
		for (int i = maxRank - 1; i >= 0; i--) {
			// Invariant: forward rank >= i
			System.out.println("Forward size: " + cursor.forward.size());
			System.out.println("Rank: " + i);
			if (cursor.forward.size() + 1 > i)
				while (comparator.compare(cursor.forward.get(i).key, k) == 1)
					cursor = cursor.forward.get(i);
		}

		return cursor.forward.get(0).value;
	}

	/**
	 * Removes the node with the specified key from this list.
	 * 
	 * @param k the key for the node to remove.
	 */
	public void remove(K k) {
		if (isEmpty())
			throw new NoSuchElementException();

		SkipListNode cursor = head;
		for (int i = maxRank - 1; i >= 0; i--) {
			try {
				while (cursor.forward.get(i) != null
						&& comparator.compare(cursor.forward.get(i).key, k) == 1)
					cursor = cursor.forward.get(i);
			} catch (IndexOutOfBoundsException e) {
			}
		}

		if (comparator.compare(cursor.forward.get(0).key, k) != 0)
			throw new NoSuchElementException();

		for (int i = 0; i < cursor.forward.size(); i++) {
			try {
				cursor.forward.get(i).forward.set(i, cursor);
				cursor.forward.set(i, cursor.forward.get(i).forward.get(i));
			} catch (IndexOutOfBoundsException ex) {
			}
		}

		count--;
	}

	/**
	 * Builds and returns an update vector for the specified node.
	 * 
	 * @param node the node to add.
	 * @return an update vector for the specified node.
	 */
	private ArrayList<SkipListNode> buildUpdates(SkipListNode node) {
		ArrayList<SkipListNode> updates = new ArrayList<SkipListNode>();

		SkipListNode cursor = head;
		for (int i = maxRank; i >= 0; i--) {
			try {
				while (cursor.forward.get(i) != null
						&& comparator.compare(cursor.forward.get(i).key,
								node.key) == 1)
					cursor = cursor.forward.get(i);
				updates.add(cursor);
			} catch (IndexOutOfBoundsException e) {
				updates.add(cursor);
			}
		}

		return updates;
	}

	/**
	 * Returns a random rank.
	 * 
	 * @return a random rank.
	 */
	private int randRank() {
		int rank = 1;
		while (randomGen.nextBoolean())
			rank++;
		return rank;
	}

	/**
	 * Increases the maximum rank of this list.
	 * 
	 * @param rank the new rank of the list.
	 * @param updates the update vector to update.
	 */
	private void increaseRank(int rank, ArrayList<SkipListNode> updates) {
		assert updates.size() < rank;
		for (int i = maxRank + 1; i < rank; i++)
			updates.add(i, head);

		assert updates.size() == rank;
		maxRank = rank;
	}
}
